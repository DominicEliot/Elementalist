//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

namespace FourCores;

/// <summary>
/// A TTS Compatible card object.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class TTSCard
{

    [System.Text.Json.Serialization.JsonPropertyName("name")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("id")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Id { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("count")]
    public int Count { get; set; } = default!;

    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [System.Text.Json.Serialization.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// A fourcores.xyz decklist in TTS compatible format.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class TTSDeckList
{

    [System.Text.Json.Serialization.JsonPropertyName("avatar")]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<TTSCard> Avatar { get; set; } = new System.Collections.ObjectModel.Collection<TTSCard>();

    [System.Text.Json.Serialization.JsonPropertyName("spellbook")]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<TTSCard> Spellbook { get; set; } = new System.Collections.ObjectModel.Collection<TTSCard>();

    [System.Text.Json.Serialization.JsonPropertyName("atlas")]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<TTSCard> Atlas { get; set; } = new System.Collections.ObjectModel.Collection<TTSCard>();

    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [System.Text.Json.Serialization.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Ruling
{

    [System.Text.Json.Serialization.JsonPropertyName("question")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Question { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("answer")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Answer { get; set; } = default!;

    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [System.Text.Json.Serialization.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Sorcery game metadata that applications may be interested in.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SorceryMetadata
{

    [System.Text.Json.Serialization.JsonPropertyName("sets")]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.IDictionary<string, SorcerySet> Sets { get; set; } = new System.Collections.Generic.Dictionary<string, SorcerySet>();

    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [System.Text.Json.Serialization.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Details about a specific Sorcery set / expansion.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SorcerySet
{
    /// <summary>
    /// A shorthand code for the card's set (as defined by fourcores.xyz) including APP (alpha pledge pack), APC (alpha precon deck), ABT (alpha box topper), P22 (various 2022 promos), ALP (alpha), BET (beta), BBT (beta box topper), P23 (various 2023 promos), D24 (2024 Dust Store Promo),SDK (Store Draft Kit)
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("setCode")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public SorcerySetSetCode SetCode { get; set; } = default!;

    /// <summary>
    /// The English language name for the set.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("displayName")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string DisplayName { get; set; } = default!;

    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [System.Text.Json.Serialization.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Content
{

    [System.Text.Json.Serialization.JsonPropertyName("publishedAt")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string PublishedAt { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("thumbnail")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Thumbnail { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("id")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Id { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("url")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Url { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("title")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Title { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("description")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Description { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("author")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Author { get; set; } = default!;

    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [System.Text.Json.Serialization.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// A single Sorcery: Contested Realm card.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class FourCoresCard
{
    /// <summary>
    /// The unique identifier of the card, as defined by fourcores.xyz
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("id")]
    public int Id { get; set; } = default!;

    /// <summary>
    /// The name of the card.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("name")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; } = default!;

    /// <summary>
    /// A shorthand code for the card's set (as defined by fourcores.xyz) including APP (alpha pledge pack), APC (alpha precon deck), ABT (alpha box topper), P22 (various 2022 promos), ALP (alpha), BET (beta), BBT (beta box topper), P23 (various 2023 promos), D24 (2024 Dust Store Promo),SDK (Store Draft Kit)
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("setCode")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public CardSetCode SetCode { get; set; } = default!;

    /// <summary>
    /// Possible card rarities.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("rarity")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public CardRarity Rarity { get; set; } = default!;

    /// <summary>
    /// Possible card categories. Note that AVATAR is defined solely as a category, not a type or subtype.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("category")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public CardCategory Category { get; set; } = default!;

    /// <summary>
    /// List of the card's types. Cards with the automaton subtype will have both the ARTIFACT and MINION types.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("types")]

    // TODO(system.text.json): Add string enum item converter
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<Types> Types { get; set; } = new System.Collections.ObjectModel.Collection<Types>();

    /// <summary>
    /// List of the card's subtypes.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("subtypes")]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<string> Subtypes { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    /// <summary>
    /// The mana cost to play the card or null for Sites and Avatars. This is a string in order to account for cards with X cost.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("manaCost")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ManaCost { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("threshold")]
    [System.ComponentModel.DataAnnotations.Required]
    public Threshold Threshold { get; set; } = new Threshold();

    /// <summary>
    /// The list of elements the card is composed of. Sites are composed of the elements they provide threshold for. Artifacts are not (currently) composed of any elements.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("elements")]

    // TODO(system.text.json): Add string enum item converter
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<Elements> Elements { get; set; } = new System.Collections.ObjectModel.Collection<Elements>();

    /// <summary>
    /// The card's gameplay rules text, as originally printed on the card.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("rulesText")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string RulesText { get; set; } = default!;

    /// <summary>
    /// The card's flavor text, if present.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("flavorText")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string FlavorText { get; set; } = default!;

    /// <summary>
    /// Full text of the card's type line.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("typeLine")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string TypeLine { get; set; } = default!;

    /// <summary>
    /// The card's artist.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("artist")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Artist { get; set; } = default!;

    /// <summary>
    /// The list of finishes (foil, nonfoil) available for the card.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("finishes")]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<Finish> Finishes { get; set; } = new System.Collections.ObjectModel.Collection<Finish>();

    /// <summary>
    /// Whether this card represents the first printing of the card.  As of Feb. 2024 this consists mostly of alpha cards. Future cards that are not reprints will have a value of true as well.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("isFirstPrinting")]
    public bool IsFirstPrinting { get; set; } = default!;

    /// <summary>
    /// The attack power of a Minion or Avatar.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("attack")]
    public int? Attack { get; set; } = default!;

    /// <summary>
    /// The defense (life) of a Minion or Avatar.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("defense")]
    public int? Defense { get; set; } = default!;

    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [System.Text.Json.Serialization.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// The list of finishes (foil, nonfoil) available for the card.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Finish
{
    /// <summary>
    /// Possible card finishes (foil / nonfoil).
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("type")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public FinishType Type { get; set; } = default!;

    /// <summary>
    /// The tcgplayer.com product id for the card. As of Feb. 2024 three cards (Jihad, Crusade, and the 2023 Gencon Crown Sorcerer promo) do not have tcgplayer product ids.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("tcgPlayerId")]
    public int? TcgPlayerId { get; set; } = default!;

    /// <summary>
    /// The tcgplayer.com low price, if available.  Note that due to low card / sales volume, some Sorcery cards do not have all price data. (Note that currently only responses of 10 cards or less will include pricing)
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("lowPriceUSD")]
    public double? LowPriceUSD { get; set; } = default!;

    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [System.Text.Json.Serialization.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// For Spells, the threshold required to play the card. For Sites, the threshold they provide to the controller.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Threshold
{

    [System.Text.Json.Serialization.JsonPropertyName("air")]
    public int Air { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("earth")]
    public int Earth { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("fire")]
    public int Fire { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("water")]
    public int Water { get; set; } = default!;

    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [System.Text.Json.Serialization.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// A unique card in a booster pack.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class BoosterCard
{
    /// <summary>
    /// A unique id for the booster card.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("id")]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Id { get; set; } = default!;

    /// <summary>
    /// Whether the card is foil or not.
    /// </summary>

    [System.Text.Json.Serialization.JsonPropertyName("isFoil")]
    public bool IsFoil { get; set; } = default!;

    [System.Text.Json.Serialization.JsonPropertyName("details")]
    [System.ComponentModel.DataAnnotations.Required]
    public FourCoresCard Details { get; set; } = new FourCoresCard();

    private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

    [System.Text.Json.Serialization.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public enum SorcerySetSetCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"APP")]
    APP = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"APC")]
    APC = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ABT")]
    ABT = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"P22")]
    P22 = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ALP")]
    ALP = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"BET")]
    BET = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"BBT")]
    BBT = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"P23")]
    P23 = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"P24")]
    P24 = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"D24")]
    D24 = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"SDK")]
    SDK = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"ALE")]
    ALE = 11,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public enum CardSetCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"APP")]
    APP = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"APC")]
    APC = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ABT")]
    ABT = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"P22")]
    P22 = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ALP")]
    ALP = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"BET")]
    BET = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"BBT")]
    BBT = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"P23")]
    P23 = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"P24")]
    P24 = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"D24")]
    D24 = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"SDK")]
    SDK = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"ALE")]
    ALE = 11,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public enum CardRarity
{

    [System.Runtime.Serialization.EnumMember(Value = @"ORDINARY")]
    ORDINARY = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"EXCEPTIONAL")]
    EXCEPTIONAL = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ELITE")]
    ELITE = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"UNIQUE")]
    UNIQUE = 3,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public enum CardCategory
{

    [System.Runtime.Serialization.EnumMember(Value = @"AVATAR")]
    AVATAR = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"SITE")]
    SITE = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"SPELL")]
    SPELL = 2,

}

/// <summary>
/// Possible card types. Note that AVATAR is defined as a category, not a type or subtype.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Types
{

    [System.Runtime.Serialization.EnumMember(Value = @"MINION")]
    MINION = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"AURA")]
    AURA = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"MAGIC")]
    MAGIC = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"ARTIFACT")]
    ARTIFACT = 3,

}

/// <summary>
/// Possible card elements.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Elements
{

    [System.Runtime.Serialization.EnumMember(Value = @"AIR")]
    AIR = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"EARTH")]
    EARTH = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"FIRE")]
    FIRE = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"WATER")]
    WATER = 3,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
public enum FinishType
{

    [System.Runtime.Serialization.EnumMember(Value = @"NONFOIL")]
    NONFOIL = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FOIL")]
    FOIL = 1,

}
